#include <iostream>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <curl/curl.h>
#include <curl/types.h>
#include <curl/easy.h>
#include <SoftwareSerial.h> 
#include <SparkFunESP8266WiFi.h> 
#include <string>
int in1 = 7
bool snow = false;
bool newsnow = false;
String str1 = "Snow";
void setup() {
   if (esp8266.begin())
    Serial.println("ESP8266 ready to go!"); 
  else
    Serial.println("Unable to communicate with the ESP8266 :(");
  int retVal;
  retVal = esp8266.connect("myNetwork", "myNetworkPassword");
  if (retVal < 0)
  {
    Serial.print(F("Error connecting: "));
    Serial.println(retVal);
  }
  retVal = client.connect("https://forecast.weather.gov/MapClick.php?lat=43.08023000000003&lon=-73.78866999999997#.Xt40A0VKiUk", 80); 
  if (retVal > 0){
    Serial.println("Successfully connected!");
  }
  pinMode(in1, OUTPUT);
  digitalWrite(in1, LOW);
}
void loop() {
  static size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream){
  int written = fwrite(ptr, size, nmemb, (FILE *)stream);
  return written;
  }

  int main(void){
    CURL *curl_handle;
    static const char *headerfilename = "head.txt";
    FILE *headerfile;
    static const char *bodyfilename = "body.txt";
    FILE *bodyfile;
    curl_global_init(CURL_GLOBAL_ALL);
    curl_handle = curl_easy_init();
    curl_easy_setopt(curl_handle, CURLOPT_URL, https://forecast.weather.gov/MapClick.php?lat=43.08023000000003&lon=-73.78866999999997#.Xt40A0VKiUk);
    curl_easy_setopt(curl_handle, CURLOPT_NOPROGRESS, 1L);
    curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, write_data);
    headerfile = fopen(headerfilename,"w");
    if (headerfile == NULL) {
      curl_easy_cleanup(curl_handle);
      return -1;
    }
    bodyfile = fopen(bodyfilename,"w");
    if (bodyfile == NULL) {
      curl_easy_cleanup(curl_handle);
      return -1;
    }
    curl_easy_setopt(curl_handle,   CURLOPT_WRITEDATA, bodyfile);
    curl_easy_perform(curl_handle);

    String readFile(const string bodyfile){
      String data;
      ifstream in(bodyfile.c_str());
      getline(in, data, string::traits_type::to_char_type(string::traits_type::eof()));
      return data;
    }
    fclose(bodyfile);
    curl_easy_cleanup(curl_handle);
  } 

    size_t found = data.find(str1); 
      if (found != string::npos) {
        newsnow = true
      else
        newsnow = false
      }
    if (snow == false and newsnow == false){
       digitalWrite(in1, LOW);
       return snow;
    }
    if (snow == true and newsnow == true){
        digitalWrite(in1, HIGH);
        return snow;
    }
    if (snow == true and newsnow == false){
          sleep(18000000);
          digitalWrite(in1, LOW);
          bool snow = false;
          return snow;
    }
 }
